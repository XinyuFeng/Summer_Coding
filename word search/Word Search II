C++:
class Solution {
public:
    struct TrieNode{
        TrieNode* next[26];
        string word;
    };
    
    TrieNode* build(vector<string>& words){
        TrieNode* root=new TrieNode();
        for(auto w : words){
            auto p=root;
            for(auto c : w){
                int idx=c-'a';
                if(!p->next[idx]) p->next[idx]=new TrieNode();
                p=p->next[idx];
            }
            p->word=w;
        }
        return root;
    }
    
    void dfs(vector<vector<char>>& board, int i, int j, TrieNode* root, vector<string>& ans){
        char c=board[i][j];
        if(c=='#' || !root->next[c-'a']) return;
        root=root->next[c-'a'];
        if(root->word!=""){
            ans.push_back(root->word);
            root->word="";
        }
        board[i][j]='#';
        if(i>0) dfs(board, i-1, j, root, ans);
        if(i<board.size()-1) dfs(board, i+1, j, root, ans);
        if(j>0) dfs(board, i, j-1, root, ans);
        if(j<board[0].size()-1) dfs(board, i, j+1, root, ans);
        board[i][j]=c;
    }
    
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> ans;
        if(board.empty() || board[0].empty()) return ans;
        TrieNode* root=build(words);
        for(int i=0; i<board.size(); ++i){
            for(int j=0; j<board[0].size(); ++j){
                dfs(board, i, j, root, ans);
                
            }
        }
        return ans;
    } 
};

Java:
public class Solution {
    class TrieNode {
        TrieNode[] next = new TrieNode[26];
        String word;
    }
    
    public TrieNode buildTrie(String[] words){
        TrieNode root = new TrieNode();
        for(String w : words){
            TrieNode p = root;
            for(char c : w.toCharArray()){
                int idx=c-'a';
                if(p.next[idx]==null) p.next[idx]=new TrieNode();
                p=p.next[idx];
            }
            p.word=w;
        }
        return root;
    }
    public List<String> findWords(char[][] board, String[] words) {
        List<String> ans = new ArrayList<>();
        if(board==null || board.length==0) return ans;
        TrieNode root = buildTrie(words);
        for(int i=0; i<board.length; ++i){
            for(int j=0; j<board[0].length; ++j){
                dfs(board, i, j, root, ans);
            }
        }
        return ans;
    }
    
    public void dfs(char[][] board, int i, int j, TrieNode root, List<String> ans){
        char c=board[i][j];
        if(c=='#' || root.next[c-'a']==null) return;
        root=root.next[c-'a'];
        if(root.word!=null){
            ans.add(root.word);
            root.word=null;
        }
        board[i][j]='#';
        if(i>0) dfs(board, i-1, j, root, ans);
        if(i<board.length-1) dfs(board, i+1, j, root, ans);
        if(j>0) dfs(board, i, j-1, root, ans);
        if(j<board[0].length-1) dfs(board, i, j+1, root, ans);
        board[i][j]=c;
    }
}
