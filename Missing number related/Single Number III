Java:
public class Solution {
    public int[] singleNumber(int[] nums) {
        int diff=0;
        for(int n : nums){
            diff^=n;
        }
        diff&=-diff;
        int[] ans={0, 0};
        for(int n : nums){
            if((n&diff)==0) ans[0]^=n;
            else ans[1]^=n;
        }
        return ans;
    }
}

C++:
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> ans={0, 0};
        int diff=accumulate(nums.begin(), nums.end(), 0, bit_xor<int>());
        diff&=-diff;
        for(auto n : nums){
            if(n&diff) ans[0]^=n;
            else ans[1]^=n;
        }
        
        return ans;
    }
};
