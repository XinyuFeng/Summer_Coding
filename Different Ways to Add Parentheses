class Solution {
    Map<String, List<Integer>> map;
    public List<Integer> diffWaysToCompute(String input) {
         map = new HashMap<>();
        return helper(input);
        
    }
    
    private List<Integer> helper(String input) {
        List<Integer> ans = new ArrayList<>();
        if (input == null || input.length() == 0) return ans;
        if (map.containsKey(input)) return map.get(input);
        if (isNum(input)) {
            ans.add(Integer.valueOf(input));
            return ans;
        }
        for (int i = 0; i < input.length(); ++i) {
            if (isOp(input.charAt(i))) {
                List<Integer> l = helper(input.substring(0, i));
                List<Integer> r = helper(input.substring(i + 1, input.length()));
                for (int a = 0; a < l.size(); ++a) {
                    for (int b = 0; b < r.size(); ++b) {
                        ans.add(Op(l.get(a), input.charAt(i), r.get(b)));
                    }
                }
                
            }
            
        }
        map.put(input, ans);
        return ans;
    }
    
    private boolean isNum(String s) {
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) > '9' || s.charAt(i) < '0') return false;
        }
        return true;
    }
    
    private boolean isOp(char c) {
        return c == '+' || c == '-' || c == '*';
    }
    
    private int Op(int a, char c, int b) {
        switch (c) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            default:
                return -1;
        }
    }
}
