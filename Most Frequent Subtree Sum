Java:
public class Solution {
    public int[] findFrequentTreeSum(TreeNode root) {
        HashMap<Integer, Integer> map=new HashMap<>();
        getSubSum(root, map);
        int max=0;
        for(int val: map.values()){
            max=Math.max(max, val);
        }
        List<Integer> ans=new ArrayList<>();
        for(int key: map.keySet()){
            if(map.get(key)==max){
                ans.add(key);
            }
        }
        int[] res=new int[ans.size()];
        for(int i=0; i<ans.size(); ++i){
            res[i]=ans.get(i);
        }
        return res;
    }
    
    int getSubSum(TreeNode root, HashMap<Integer, Integer> map){
        if(root==null) return 0;
        int left=getSubSum(root.left, map);
        int right=getSubSum(root.right, map);
        int sum=left+right+root.val;
        map.put(sum, map.getOrDefault(sum, 0)+1);
        return sum;
    }
}
