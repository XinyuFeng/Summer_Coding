Java:
public class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        List<List<Integer>> ans=new ArrayList<>();
        if(words==null || words.length<2) return ans;
        
        Map<String, Integer> map=new HashMap<>();
        for(int i=0;i<words.length; ++i){
            map.put(words[i], i);
        }
        
        for(int i=0; i<words.length; ++i){
            for(int j=0; j<=words[i].length(); ++j){
                String str1=words[i].substring(0,j);
                String str2=words[i].substring(j);
                if(isP(str1)){
                    String tmp=new StringBuilder(str2).reverse().toString();
                    if(map.containsKey(tmp) && map.get(tmp)!=i){
                        List<Integer> list=new ArrayList<>();
                        list.add(map.get(tmp));
                        list.add(i);
                        ans.add(list);
                    }
                }
                if(isP(str2)){
                    String tmp=new StringBuilder(str1).reverse().toString();
                    if(map.containsKey(tmp) && map.get(tmp)!=i && str2.length()!=0){
                        List<Integer> list=new ArrayList<>();
                        list.add(i);
                        list.add(map.get(tmp));
                        ans.add(list);
                    }
                }
                
                
            }
        }
        
        return ans;
    }
    
    public boolean isP(String s){
        int left=0, right=s.length()-1;
        while(left<right){
            if(s.charAt(left)!=s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }
}
