Java:
public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int[][] dirs = {{0,1},{1,0},{0,-1},{-1,0}};
        List<Integer>ans = new ArrayList<>();
        if(matrix==null || matrix.length==0 || matrix[0].length==0)
            return ans;
            
        int row=matrix.length, col=matrix[0].length;
        int[] step={col, row-1};
        int idr=0;
        int i=0, j=-1;
        while(step[idr%2]!=0){
            for(int k=0; k<step[idr%2]; ++k){
                i+=dirs[idr][0]; j+=dirs[idr][1];
                ans.add(matrix[i][j]);
            }
            
            step[idr%2]--;
            idr=(idr+1)%4;
        }
        
        return ans;
    }
}

C++:
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> ans;
        if(matrix.empty() || matrix[0].empty()) return ans;
        
        int row=matrix.size(), col=matrix[0].size();
        int left=0, right=col-1, up=0, down=row-1;
        int count=0;
        
        while(true){
            for(int i=left; i<=right; ++i) {
                ans.push_back(matrix[up][i]);
            }
            if(++up>down) break;
            
            for(int j=up; j<=down; ++j){
                ans.push_back(matrix[j][right]);
            }
            if(--right<left) break;
            
            for(int i=right; i>=left; --i){
                ans.push_back(matrix[down][i]);
            }
            if(--down<up) break;
            
            for(int j=down; j>=up; --j){
                ans.push_back(matrix[j][left]);
            }
            if(++left>right) break;
        }
        
        return ans;
    }
};
