DP:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int len=nums.size();
        int dp=0, ans=INT_MIN;
        for(int i=0; i<len; ++i){
            dp=nums[i]+(dp>0? dp : 0);
            ans=max(ans, dp);
        }
        return ans;
    }
};

D&C:
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        return helper(nums, 0, nums.size()-1);
        
    }
    
    int helper(vector<int>& nums, int left, int right){
        if(left>right) return INT_MIN;
        if(left==right) return nums[left];
        
        int len=right-left;
        int l=helper(nums, left, left+len/2);
        int r=helper(nums, left+len/2+1, right);
        
        int ml=INT_MIN, mr=INT_MIN;
        int tmp=0;
        for(int i=left+len/2; i>=left; --i){
            tmp+=nums[i];
            ml=max(ml, tmp);
        }
        tmp=0;
        for(int i=left+len/2+1; i<=right; ++i){
            tmp+=nums[i];
            mr=max(mr, tmp);
        }
        if(mr==INT_MIN) mr=0;
        return max(l, max(r, ml+mr));
    }
    
};
