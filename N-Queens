class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] tmp = new char[n][n];
        for (int i = 0; i < n; ++i) {
            Arrays.fill(tmp[i], '.');
        }
        boolean[] flag = new boolean[5 * n - 2];
        solve(ans, tmp, flag, 0, n);
        return ans;
    }
    
    private void solve(List<List<String>> ans, char[][] tmp, boolean[] flag, int r, int n) {
        if (r == n) {
            ans.add(construct(tmp, n));
            return;
        }
        
        for (int c = 0; c < n; ++c) {
            if (flag[c] == false && flag[n + c + r] == false && flag[4 * n - 2 + c - r] == false) {
                flag[c] = true;
                flag[n + c + r] = true;
                flag[4 * n - 2 + c - r] = true;
                tmp[r][c] = 'Q';
                solve(ans, tmp, flag, r + 1, n);
                tmp[r][c] = '.';
                flag[c] = false;
                flag[n + c + r] = false;
                flag[4 * n - 2 + c - r] = false;
            }
        }
    }
    
    private List<String> construct(char[][] tmp, int n) {
        List<String> ans = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            ans.add(new String(tmp[i]));
        }
        return ans;
    }
}
