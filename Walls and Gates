class Solution {
    public void wallsAndGates(int[][] rooms) {
        if (rooms == null || rooms.length == 0 || rooms[0].length == 0) return;
        int m = rooms.length, n = rooms[0].length;
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (rooms[i][j] == 0) {
                    queue.add(new int[]{i, j});
                }
            }

        }
        while (!queue.isEmpty()) {
            int[] node = queue.poll();
            for (int[] dir : dirs) {
                int ni = node[0] + dir[0];
                int nj = node[1] + dir[1];
                if (ni >= 0 && ni < m && nj >= 0 && nj < n && isP(rooms[ni][nj]) && rooms[ni][nj] > rooms[node[0]][node[1]] + 1) {
                    rooms[ni][nj] = rooms[node[0]][node[1]] + 1;
                    queue.add(new int[]{ni, nj});
                    
                }
            }
        }
              
    }
    
    private boolean isP(int num) {
        return num != 0 && num != -1;
    }
}
