C++:
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int, int> T;
        for(int i=0; i<inorder.size(); ++i){
            T[inorder[i]]=i;
        }
        return helper(inorder, postorder, postorder.size()-1, 0, inorder.size()-1, T);
    }
    
    TreeNode* helper(vector<int>& inorder, vector<int>& postorder, int posEnd, int inStart, int inEnd, unordered_map<int, int>& T){
        if(posEnd<0 || inStart>inEnd) return NULL;
        TreeNode* root=new TreeNode(postorder[posEnd]);
        int pos=T[postorder[posEnd]];
        root->right=helper(inorder, postorder, posEnd-1, pos+1, inEnd, T);
        root->left=helper(inorder, postorder, posEnd-(inEnd-pos)-1, inStart, pos-1, T);
        return root;
    }
};

iterate:
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(inorder.empty()) return NULL;
        int len=inorder.size();
        TreeNode* root=new TreeNode(postorder[len-1]);
        TreeNode* t=root;
        stack<TreeNode*> T;
        T.push(root);
        int i=len-2, j=len-1;
        bool flag=false;
        while(i>=0){
            if(T.size() && T.top()->val==inorder[j]){
                flag=true;
                t=T.top();
                T.pop();
                j--;
            }
            else{
                if(flag){
                    flag=false;
                    t->left=new TreeNode(postorder[i--]);
                    t=t->left;
                    T.push(t);
                    
                }
                else{
                    t->right=new TreeNode(postorder[i--]);
                    t=t->right;
                    T.push(t);
                }
                
            }
        }
        return root;
        
    }
    

};
