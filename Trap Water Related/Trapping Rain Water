C++ 1:
class Solution {
public:
    int trap(vector<int>& height) {
        int len=height.size();
        stack<int>T;
        int ans=0;
        for(int i=0; i<len; ++i){
            if(T.empty() || height[i]<=height[T.top()]) T.push(i);
            else{
                int bot=height[T.top()];
                T.pop();
                if(T.size())
                    ans+=(i-T.top()-1)*(min(height[i], height[T.top()])-bot);
                i--;
            }
            
        }

        return ans;
    }
};

c++ 2:
class Solution {
public:
    int trap(vector<int>& height) {
        int len=height.size();
        int left=0, right=len-1;
        int ml=0, mr=0, ans=0;
        while(left<=right){
            if(height[left]<height[right]){
                if(height[left]>ml) ml=height[left];
                else{
                    ans+=ml-height[left++];
                }
            }
            else{
                if(height[right]>mr) mr=height[right];
                else{
                    ans+=mr-height[right--];
                }
            }
        }
        return ans;
    }
};

Java 1:
public class Solution {
    public int trap(int[] height) {
        if(height==null || height.length==0) return 0;
        int len=height.length;
        int i=0, ans=0;
        Stack<Integer> T = new Stack<>();
        while(i<len){
            if(T.empty() || height[i]<=height[T.peek()]){
                T.push(i++);
            }
            else{
                int bot=T.pop();
                if(!T.isEmpty()){
                    ans+=(i-T.peek()-1)*(Math.min(height[i], height[T.peek()])-height[bot]);
                }
            }
        }
        return ans;
    }
}
