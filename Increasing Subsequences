class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        Set<List<Integer>> ans = new HashSet<>();
        if (nums == null || nums.length == 0) return new ArrayList<>(ans);
        List<Integer> tmp = new ArrayList<>();
        dfs(nums, 0, tmp, ans);
        return new ArrayList<>(ans);
    }
    
    private void dfs(int[] nums, int idx, List<Integer> tmp, Set<List<Integer>> ans) {
        if (tmp.size() >= 2) {
            ans.add(new ArrayList<>(tmp));
        }
        
        for (int i = idx; i < nums.length; ++i) {
            if (tmp.size() == 0 || tmp.get(tmp.size() - 1) <= nums[i]) {
                tmp.add(nums[i]);
                dfs(nums, i + 1, tmp, ans);
                tmp.remove(tmp.size() - 1);
            }
        }
    }
}
