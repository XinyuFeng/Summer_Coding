C++:
class Solution {
public:
    bool wordPattern(string pattern, string str) {
        istringstream in(str);
        int i=0;
        unordered_map<char, int> T1;
        unordered_map<string, int> T2;
        for(string word; in>>word; ++i){
            if(i==pattern.size()||T1[pattern[i]]!=T2[word]) return false;
            T1[pattern[i]]=i+1;
            T2[word]=i+1;
        }
        return i==pattern.size();
    }
};

Java:
public class Solution {
    public boolean wordPattern(String pattern, String str) {
        String[] arr=str.split(" ");
        if(arr.length!=pattern.length()) return false;
        HashMap<Character, String> map=new HashMap<>();
        char[] p=pattern.toCharArray();
        for(int i=0; i<pattern.length(); ++i){
            if(map.containsKey(p[i])){
                if(!map.get(p[i]).equals(arr[i])){
                    return false;
                }
            }
            else if(map.containsValue(arr[i])){
                return false;
            }
            
            map.put(p[i], arr[i]);
        }
        return true;
        
    }
}
