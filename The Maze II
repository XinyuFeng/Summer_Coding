class Solution {
    public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        if (maze == null || maze.length == 0) return -1;
        int m = maze.length, n = maze[0].length;
        int[][] distance = new int[m][n];
        
        for (int[] tmp : distance) {
            Arrays.fill(tmp, Integer.MAX_VALUE);
        }
        distance[start[0]][start[1]] = 0;
        djkstra(maze, start, distance);
        return distance[destination[0]][destination[1]] == Integer.MAX_VALUE ? -1 : distance[destination[0]][destination[1]];
        
    }
    
    private void djkstra(int[][] maze, int[] start, int[][] distance) {
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        PriorityQueue<int[]> queue = new PriorityQueue<>((a, b) -> a[2] - b[2]);
        queue.offer(new int[]{start[0], start[1], 0});
        while (!queue.isEmpty()) {
            int[] node = queue.poll(); //equal to visited
            if (distance[node[0]][node[1]] < node[2]) continue;
            for (int[] dir : dirs) {
                int x = node[0] + dir[0];
                int y = node[1] + dir[1];
                int cnt = 0;
                while (x >= 0 && x < maze.length && y >= 0 && y < maze[0].length && maze[x][y] == 0) {
                    x += dir[0];
                    y += dir[1];
                    cnt++;
                }
                x -= dir[0]; y -= dir[1];
                int dist = distance[node[0]][node[1]] + cnt;
                if (distance[x][y] > dist) {
                    distance[x][y] = dist;
                    queue.offer(new int[]{x, y, dist});
                }
            }
        }
    }
}
