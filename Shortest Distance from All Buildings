class Solution {
    private int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int shortestDistance(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        
        int m = grid.length, n = grid[0].length;
        int[][] dist = new int[m][n];
        int idx = 0;
        
        List<int[]> list = new ArrayList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    list.add(new int[]{i, j});
                }
                grid[i][j] = -grid[i][j];
            }
        }
        for (int i = 0; i < list.size(); ++i) {
            bfs(grid, dist, list.get(i), i);
        }
        
        int sum = Integer.MAX_VALUE;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == list.size()) {
                    sum = Math.min(sum, dist[i][j]);
                    grid[i][j] = 0;
                }
                grid[i][j] = -grid[i][j];
            }
        }
        return sum == Integer.MAX_VALUE? -1 : sum;
    }
    
    private void bfs(int[][] grid, int[][]dist, int[] build, int id) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{build[0], build[1], 0});
        int m = grid.length;
        int n = grid[0].length;
        while (!queue.isEmpty()) {
            int[] node = queue.poll();
            for (int[] dir : dirs) {
                int x = node[0] + dir[0];
                int y = node[1] + dir[1];
                if (x >= 0 && y >= 0 && x < m && y < n && grid[x][y] == id) {
                    grid[x][y]++;
                    dist[x][y] += (node[2] + 1);
                    queue.add(new int[]{x, y, node[2] + 1});
                }
            }
        }
    }
}
