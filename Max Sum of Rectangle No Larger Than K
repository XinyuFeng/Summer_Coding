Java:
public class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        if (matrix == null || matrix.length == 0) return 0;
        int row = matrix.length, col = matrix[0].length, ans = Integer.MIN_VALUE;
        for (int l = 0; l < col; ++l) {
            int[] sums = new int[row];
            for (int r = l; r < col; ++r) {
                for (int i = 0; i < row; ++i) {
                    sums[i] +=matrix[i][r];
                }
                TreeSet<Integer> accuSet = new TreeSet<>();
                accuSet.add(0);
                int curSum = 0, curMax = Integer.MIN_VALUE;
                for (int sum : sums) {
                    curSum += sum;
                    Integer tmp = accuSet.ceiling(curSum - k);
                    if (null != tmp) {
                        curMax = Math.max(curMax, curSum - tmp);
                    }
                    accuSet.add(curSum);
                }
                ans = Math.max(ans, curMax);
            }
            
            
        }
        return ans;
    }
}
