class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        LinkedList<Integer> ans = new LinkedList<>();
        if (n == 1){
            ans.add(0);
            return ans;
        }
        if (edges == null || edges.length == 0 || edges[0].length == 0) return ans;
         
        List<Set<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            graph.add(new HashSet<Integer>());
        }
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        for (int i = 0; i < n; ++i) {
            if (graph.get(i).size() == 1) {
                ans.add(i);
            }
        }
        while (n > 2) {
            int len = ans.size();
            n -= len;
            for (int i = 0; i < len; ++i) {
                int node = ans.poll();
                int cand = graph.get(node).iterator().next();
                graph.get(cand).remove(node);
                if (graph.get(cand).size() == 1) {
                    ans.add(cand);
                }
            }
        }
        return ans;
    }
}
