Java:
public class Solution {
    public int maximalSquare(char[][] matrix) {
        if(matrix==null || matrix.length==0) return 0;
        int row=matrix.length, col=matrix[0].length;
        int[] dp=new int[row];
        int ans=0;
        for(int i=0; i<row; ++i){
            dp[i]=matrix[i][0]-'0';
            ans=Math.max(ans, dp[i]);
        }
        
        for(int j=1; j<col; ++j){
            int pre=dp[0];
            dp[0]=matrix[0][j]-'0';
            ans=Math.max(ans, dp[0]);
            for(int i=1; i<row; ++i){
                int tmp=dp[i];
                if(matrix[i][j]=='1'){
                    dp[i]=Math.min(Math.min(dp[i], dp[i-1]), pre)+1;
                    ans=Math.max(ans, dp[i]);
                }
                else{
                    dp[i]=0;
                }
                pre=tmp;
            }
        }
        return ans*ans;
    }
}

C++:
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty() || matrix[0].empty()) return 0;
        
        int ans=0;
        int row=matrix.size(), col=matrix[0].size();
        vector<int>dp(row, 0);
        
        for(int j=0; j<col; ++j){
            int pre=dp[0];
            dp[0]=matrix[0][j]-'0';
            ans=max(ans, dp[0]);
            for(int i=1; i<row; ++i){
                int tmp=dp[i];
                if(matrix[i][j]=='1'){
                    dp[i]=min(dp[i], min(dp[i-1], pre))+1;
                    ans=max(ans, dp[i]);
                }
                else dp[i]=0;
                pre=tmp;
            }
        }
        
        
        return ans*ans;
    }
};
