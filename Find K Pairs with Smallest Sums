class Solution {
    public List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        List<int[]> ans = new ArrayList<>();
        if (nums1 == null || nums2 == null || nums1.length == 0 || nums2.length == 0 || k == 0) return ans;
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b) {
                return nums1[a[0]] + nums2[a[1]] - nums1[b[0]] - nums2[b[1]];
            }
        });
        
        for (int i = 0; i < nums1.length && i < k; ++i) {
            pq.offer(new int[]{i, 0});
        }
        
        while (k-- > 0 && !pq.isEmpty()) {
            int[] node = pq.poll();
            ans.add(new int[]{nums1[node[0]], nums2[node[1]]});
            if (node[1] < nums2.length - 1) {
                pq.offer(new int[]{node[0], node[1] + 1});
            }
        }
        return ans;
    }
}
