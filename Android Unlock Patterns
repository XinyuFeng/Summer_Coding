public class Solution {
    public int numberOfPatterns(int m, int n) {
        int[][] skip = new int[10][10];
        skip[1][3] = skip[3][1] = 2;
        skip[1][7] = skip[7][1] = 4;
        skip[3][9] = skip[9][3] = 6;
        skip[7][9] = skip[9][7] = 8;
        skip[2][8] = skip[8][2] = skip[4][6] = skip[6][4] = skip[1][9] = skip[9][1] = skip[3][7] = skip[7][3] = 5;
        
        int ans = 0;
        boolean[] vis = new boolean[10];
        for (int i = m; i <= n; ++i) {
            ans += DFS(vis, 1, i - 1, skip) * 4;
            ans += DFS(vis, 2, i - 1, skip) * 4;
            ans += DFS(vis, 5, i - 1, skip);
        }
        return ans;
    }
    
    private int DFS(boolean[] vis, int cur, int len, int[][] skip) {
        if (len < 0) return 0;
        if (len == 0) return 1;
        vis[cur] = true;
        
        int res = 0;
        for (int i = 1; i <= 9; ++i) {
            if (!vis[i] && (skip[cur][i] == 0 || vis[skip[cur][i]])) {
                res += DFS(vis, i, len - 1, skip);
            }
        }
        
        vis[cur] = false;
        
        return res;
    }
}
