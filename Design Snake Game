class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    int[][] food;
    int width, height;
    LinkedList<Integer> body;
    HashSet<Integer> set;
    int foodIdx;
    int score;
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        this.body = new LinkedList<>();
        this.set = new HashSet<>();
        foodIdx = 0;
        score = 0;
        this.body.add(0);
        this.set.add(0);
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        if (score == -1) return -1;
        int head = body.peekFirst();
        int row = head / width;
        int col = head % width;
        if (direction.equals("U")) {
            row--;
        }
        else if (direction.equals("D")) {
            row++;
        }
        else if (direction.equals("L")) {
            col--;
        }
        else {
            col++;
        }
        
        int nhead = row * width + col;
        set.remove(body.peekLast());
        if (row < 0 || row >= height || col < 0 || col >= width || set.contains(nhead)) {
            score = -1;
            return -1;
        }
        set.add(nhead);
        if (foodIdx < food.length && food[foodIdx][0] == row && food[foodIdx][1] == col) {
            set.add(body.peekLast());
            body.addFirst(nhead);
            foodIdx++;
            score++;
            return score;
        }
        
        body.addFirst(nhead);
        body.pollLast();
        return score;
    }
}
