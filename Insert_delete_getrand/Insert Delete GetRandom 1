Java:
public class RandomizedSet {

    ArrayList<Integer> nums;
    HashMap<Integer, Integer> locs;
    java.util.Random rand=new java.util.Random();
    /** Initialize your data structure here. */
    public RandomizedSet() {
        nums=new ArrayList<Integer>();
        locs=new HashMap<Integer, Integer>();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(locs.containsKey(val)) return false;
        locs.put(val, nums.size());
        nums.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!locs.containsKey(val)) return false;
        int idx=locs.get(val);
        int last=nums.get(nums.size()-1);
        nums.set(idx, last);
        locs.put(last, idx);
        nums.remove(nums.size()-1);
        locs.remove(val);
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        return nums.get(rand.nextInt(nums.size()));
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
 
 C++:
 class RandomizedSet {
public:
    vector<int> container;
    unordered_map<int, int> T;
    /** Initialize your data structure here. */
    RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    bool insert(int val) {
        if(T.count(val)) return false;
        container.push_back(val);
        T[val]=container.size()-1;
        return true;
        
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    bool remove(int val) {
        if(T.count(val)==0) return false;
        int tmp=container.back();
        swap(container[T[val]], container[container.size()-1]);
        T[tmp]=T[val];
        T.erase(val);
        container.pop_back();
        return true;
    }
    
    /** Get a random element from the set. */
    int getRandom() {
        return container[rand()%container.size()];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.insert(val);
 * bool param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
