C++ version:(4 Sum as an example)

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        vector<int> tmp;
        if(nums.size()<4) return ans;
        KSum(nums, target, 4, ans, 0, tmp);
        return ans;
    }
    
    void KSum(vector<int>& nums, int target, int k, vector<vector<int>>& ans, int pos, vector<int>& tmp){
        if(k==2){//2Sum situation
            int left=pos, right=nums.size()-1;
            while(left<right){
                if(nums[left]+nums[right]==target){
                    tmp.push_back(nums[left]);
                    tmp.push_back(nums[right]);
                    ans.push_back(tmp);
                    tmp.pop_back();
                    tmp.pop_back();
                    left++; right--;
                    while(left<right && nums[left]==nums[left-1]) left++;
                    while(left<right && nums[right]==nums[right+1]) right--;
                }
                else if (nums[left]+nums[right]<target) left++;
                else right--;
            }
        }
        else{
            for(int i=pos; i<nums.size()-k+1; ++i){ //backtrack method for KSum
                if(i>pos && nums[i] == nums[i-1]) continue; 
                int sum=nums[i];
                for(int j=i+1; j<i+k; ++j){ // pruning
                    sum+=nums[j];
                }
                if(sum>target) break;// pruning
                sum=nums[i];
                for(int j=nums.size()-k+1; j<nums.size(); ++j){ //pruning
                    sum+=nums[j];
                }
                if(sum<target) continue;// pruning
                tmp.push_back(nums[i]);
                KSum(nums, target-nums[i], k-1, ans, i+1, tmp);
                tmp.pop_back();
            }
        }
    }
};
