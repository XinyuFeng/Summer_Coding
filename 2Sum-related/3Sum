Java version:
public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        int len = nums.length;
        
        for(int i=0; i<len; ++i){
            if(nums[i]>0) break;
            if(i>0 && nums[i]==nums[i-1]) continue;
            int part = -nums[i], left=i+1, right = len-1;
            while(left<right){
                int tmp = nums[left]+nums[right];
                if(tmp == part) {
                    ans.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    left++; right--;
                    while(left<right && nums[left]==nums[left-1]) left++;
                    while(left<right && nums[right]==nums[right+1]) right--;
                }
                else if(tmp<part){
                    left++;
                }
                else{
                    right--;

                }
            }
        }
        return ans;
        
    }
}

C++ version:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        int len = nums.size();
        //sort array
        sort(nums.begin(), nums.end());
        for(int i=0; i<len; ++i){
            if(i && nums[i]==nums[i-1]) continue;
            int pivot = nums[i], left = i+1, right = len-1, tmp = 0-pivot;
            while(left<right){
                int part = nums[left]+nums[right];
                if(part==tmp){
                    ans.push_back({pivot, nums[left], nums[right]});
                    left++; right--;
                    while(left<right && nums[left]==nums[left-1]) left++;
                    while(left<right && nums[right]==nums[right+1]) right--;
                }
                else if(part>tmp){
                    right--;
                    while(left<right && nums[right]==nums[right+1]) right--;
                }
                else{
                    left++;
                    while(left<right && nums[left]==nums[left-1]) left++;
                } 
                

            }
            
        }
        
        return ans;
    }
};

Python version:
class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        list.sort(nums)
        ans = []
        for i, num in enumerate(nums):
            if num > 0:
                return ans
            if i > 0 and num == nums[i-1]:
                continue
            part = -num
            left = i+1
            right = len(nums)-1
            while left < right:
                tmp = nums[left] + nums[right]
                if tmp == part:
                    ans.append([num, nums[left], nums[right]])
                    left+=1
                    right-=1
                    while left < right and nums[left]==nums[left-1]:
                        left+=1
                    while left < right and nums[right]==nums[right+1]:
                        right-=1
                elif tmp < part:
                    left += 1
                else:
                    right -= 1
        return ans
