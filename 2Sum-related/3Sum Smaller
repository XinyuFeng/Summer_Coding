Java version:
public class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if(nums.length==0) return 0;
        Arrays.sort(nums);
        int len=nums.length;
        int ans=0;
        for(int i=0; i<len-1; ++i){
            int part=target-nums[i];
            int left=i+1, right=len-1;
            while(left<right){
                if(nums[left]+nums[right]<part){
                    ans+=(right-left);
                    left++;
                }
                else right--;
            }
        }
        return ans;
    }
}

C++ version:
class Solution {
public:
    int threeSumSmaller(vector<int>& nums, int target) {
        if(nums.empty()) return 0;
        sort(nums.begin(), nums.end());
        
        int ans=0;
        int len=nums.size();
        for(int i=0; i<len; ++i){
            int part = target - nums[i];
            int left = i+1, right = len-1;
            while(left < right){
                int tmp = nums[left] + nums[right];
                if(tmp < part){
                    ans+=(right-left);
                    left++;
                }
                else right--;
            }
          
        }
          return ans;
    }
};

Python version:
class Solution(object):
    def threeSumSmaller(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if len(nums)==0:
            return 0
        list.sort(nums)
        ans=0
        for i in range(len(nums)):
            part = target - nums[i]
            left = i+1
            right = len(nums)-1
            while left < right:
                if nums[left]+nums[right]<part:
                    ans+=(right-left)
                    left+=1
                else:
                    right-=1
        return ans
