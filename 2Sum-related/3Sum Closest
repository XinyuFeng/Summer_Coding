Java version:
public class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int len = nums.length;
        int ans = Integer.MAX_VALUE;
        Arrays.sort(nums);
        for(int i=0; i<len-2; ++i){
            int left=i+1, right=len-1;
            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];
                if(sum>target) right--;
                else if(sum<target) left++;
                else return sum;
                if(ans==Integer.MAX_VALUE || Math.abs(ans-target)>Math.abs(sum-target))
                    ans=sum;
            }
        }
        return ans;
    }
}

C++ version:
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        if(nums.empty()) return 0;
        sort(nums.begin(), nums.end());
        int len=nums.size();
        int ans=INT_MAX;
        for(int i=0; i<len-2; ++i){
            int left=i+1, right=len-1;
            
            while(left<right){
                int sum=nums[i]+nums[left]+nums[right];
                ans= ans==INT_MAX || abs(ans-target)>abs(sum-target)? sum : ans;
                if(sum==target) return target;
                else if(sum>target) right--;
                else left++;
            }

        }
        return ans;
        
    }
};

Python version:
class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        list.sort(nums)
        ans = nums[0]+nums[1]+nums[2]
        for i in range(len(nums)-2):
            left=i+1
            right=len(nums)-1
            while left<right:
                _sum=nums[i]+nums[left]+nums[right]
                if _sum == target:
                    return _sum
                elif _sum < target:
                    left+=1
                else:
                    right-=1
                if abs(ans-target)>abs(_sum-target):
                    ans=_sum
        return ans
        
