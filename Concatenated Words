public class Solution {
    class Node {
        Node[] sons;
        boolean isEnd;
        public Node() {
            sons = new Node[26];
        }
    }
    
    private void addWord(String str, Node root) {
        char[] chars = str.toCharArray();
        Node cur = root;
        for (char c : chars) {
            if (cur.sons[c - 'a'] == null) {
                cur.sons[c - 'a'] = new Node();
            }
            cur = cur.sons[c - 'a'];
        }
        cur.isEnd = true;
    }
    
    public boolean testWord(char[] chars, int idx, Node root, int count) {
        Node cur = root;
        int n = chars.length;
        for (int i = idx; i < n; ++i) {
            if (cur.sons[chars[i] - 'a'] == null) return false;
            if (cur.sons[chars[i] - 'a'].isEnd) {
                if (i == n - 1) {
                    return count >= 1;
                }
                if (testWord(chars, i + 1, root, count + 1)) {
                    return true;
                }
            }
            cur = cur.sons[chars[i] - 'a'];
        }
        
        return false;
    }
    
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        List<String> ans = new ArrayList<>();
        if (words == null || words.length == 0) return ans;
        Node root = new Node();
        
        for (String word : words) {
            if (word.length() == 0) continue;
            addWord(word, root);
        }
        
        for (String word : words) {
            if (word.length() == 0) continue;
            if (testWord(word.toCharArray(), 0, root, 0)) {
                ans.add(word);
            }
        }
        
        return ans;
    }
}
