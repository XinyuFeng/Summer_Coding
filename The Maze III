class Solution {
    class Point implements Comparable<Point> {
        int x, y, val;
        String s;
        public Point(int _x, int _y, int _val, String _s) {
            x = _x;
            y = _y;
            val = _val;
            s = _s;
        }
        public int compareTo(Point p) {
            return val == p.val ? s.compareTo(p.s) : val - p.val;
        }
    }
    
    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {
        if (maze == null || maze.length == 0 || maze[0].length == 0) return "";
        int m = maze.length, n = maze[0].length;
        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        String[] ds = {"u", "d", "l", "r"};
        Point[][] distance = new Point[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                distance[i][j] = new Point(i, j, Integer.MAX_VALUE, "");
            }
        }
        distance[ball[0]][ball[1]].val = 0;        
        PriorityQueue<Point> queue = new PriorityQueue<>();
        queue.offer(new Point(ball[0], ball[1], 0, ""));
        while (!queue.isEmpty()) {
            Point node = queue.poll();
            Point check = distance[node.x][node.y];
            if (check.compareTo(node) < 0) continue;
            for (int i = 0; i < 4; ++i) {
                int[] dir = dirs[i];
                int x = node.x + dir[0];
                int y = node.y + dir[1];
                int cnt = node.val;
                while (x >= 0 && x < m && y >= 0 && y < n && maze[x][y] == 0 && (x != hole[0] || y != hole[1])) {
                    x += dir[0];
                    y += dir[1];
                    cnt++;
                }
                if (x != hole[0] || y != hole[1]) {
                    x -= dir[0];
                    y -= dir[1];
                }
                Point p = new Point(x, y, cnt, node.s + ds[i]);
                if (p.compareTo(distance[x][y]) < 0) {
                    distance[x][y] = p;
                    queue.offer(p);
                }
            }
            
        }
        return distance[hole[0]][hole[1]].val == Integer.MAX_VALUE? "impossible" : distance[hole[0]][hole[1]].s;
    }
}
