Java:
public class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums==null || nums.length==0) return res;
        boolean[] used=new boolean[nums.length];
        List<Integer> list = new ArrayList<Integer>();
        Arrays.sort(nums);
        dfs(nums, used, list, res);
        return res;
    }
    
    public void dfs(int[] nums, boolean[] used, List<Integer> list, List<List<Integer>> res){
        if(list.size() == nums.length){
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for(int i=0; i<nums.length; ++i){
            if(used[i]) continue;
            if(i>0 && nums[i-1]==nums[i]&&!used[i-1]) continue;
            used[i]=true;
            list.add(nums[i]);
            dfs(nums, used, list, res);
            used[i]=false;
            list.remove(list.size()-1);
        }
    }
}

C++:
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        dfs(nums, ans, 0);
        return ans;
    }
    void dfs(vector<int> nums, vector<vector<int>>& ans, int idx){
        if(idx==nums.size()){
            ans.push_back(nums);
            return;
        }
        for(int i=idx; i<nums.size(); ++i){
            if(i>idx && nums[i]==nums[idx]) continue;
            swap(nums[i], nums[idx]);
            dfs(nums, ans, idx+1);
        }
    }
};
