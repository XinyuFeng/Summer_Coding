class Solution {
    public int[][] updateMatrix(int[][] matrix) {
        if (matrix == null || matrix.length == 0) return matrix;
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dist = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == 0) {
                    dist[i][j] = 0;
                    queue.offer(new int[]{i, j});
                }
                else dist[i][j] = Integer.MAX_VALUE;
            }
        }
        
        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        while (!queue.isEmpty()) {
            int[] node = queue.poll();
            for(int[] dir : dirs) {
                int x = node[0] + dir[0];
                int y = node[1] + dir[1];
                if (x >= 0 && y >= 0 && x < m && y < n) {
                    if (dist[x][y] > dist[node[0]][node[1]] + 1) {
                        dist[x][y] = dist[node[0]][node[1]] + 1;
                        queue.offer(new int[]{x, y});
                    }
                }
            }
            
        }
        return dist;
    }
}
