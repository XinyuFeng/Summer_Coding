Java:
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals.size()<=1) return intervals;
        intervals.sort((l1, l2)->Integer.compare(l1.start,l2.start));
        List<Interval> ans = new ArrayList<>();
        Interval pre=null;
        for(Interval item : intervals){
            if(pre==null || item.start>pre.end){
                ans.add(item);
                pre=item;
            }
            else pre.end=Math.max(pre.end, item.end);
        }
        return ans;
    }
}

C++:
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        if(intervals.empty()) return vector<Interval>();
        vector<Interval> ans;
        sort(intervals.begin(), intervals.end(), [](Interval a, Interval b){return a.start<b.start;});
        ans.push_back(intervals[0]);
        for(int i=1; i<intervals.size(); ++i){
            if(intervals[i].start>ans.back().end) ans.push_back(intervals[i]);
            else ans.back().end=max(ans.back().end, intervals[i].end);
        }
        
        return ans;
    }
};
