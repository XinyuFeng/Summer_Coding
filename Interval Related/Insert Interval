C++:
/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        auto compare = [] (const Interval &intv1, const Interval &intv2){
            return intv1.end<intv2.start;
        };
        auto range=equal_range(intervals.begin(), intervals.end(), newInterval, compare);
        auto iter1=range.first, iter2=range.second;
        if(iter1==iter2){
            intervals.insert(iter1, newInterval);
        }
        else{
            iter2--;
            iter2->start=min(newInterval.start, iter1->start);
            iter2->end=max(newInterval.end, iter2->end);
            intervals.erase(iter1, iter2);
        }
        return intervals;
    }
};

Java:
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        
        List<Interval> ans=new ArrayList<>();
        int i=0;
        for(; i<intervals.size(); ++i){
            if(intervals.get(i).start>newInterval.end){
                break;
            }
            else if(intervals.get(i).end<newInterval.start){
                ans.add(new Interval(intervals.get(i).start, intervals.get(i).end));
            }
            else{
                newInterval.start=Math.min(intervals.get(i).start, newInterval.start);
                newInterval.end=Math.max(intervals.get(i).end, newInterval.end);
            }
        }
        ans.add(new Interval(newInterval.start, newInterval.end));
        
        while(i<intervals.size()){
            ans.add(new Interval(intervals.get(i).start, intervals.get(i).end));
            i++;
        }
        return ans;
    }
}
