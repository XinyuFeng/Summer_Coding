class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        int row = grid.length, col = grid[0].length;
        boolean[][] mark = new boolean[row][col];
        int ans = 0;
        for (int i = 0; i < row; ++i) {
            for (int j = 0; j < col; ++j) {
                if (grid[i][j] == '1' && !mark[i][j]) {
                    dfs(grid, i, j, mark);
                    ans++;
                }
            }
        }
        return ans;
    }
    
    private void dfs(char[][] grid, int i, int j, boolean[][] mark) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0' || mark[i][j]) return;
        mark[i][j] = true;
        dfs(grid, i + 1, j, mark);
        dfs(grid, i - 1, j, mark);
        dfs(grid, i, j + 1, mark);
        dfs(grid, i, j - 1, mark);
    }
}
