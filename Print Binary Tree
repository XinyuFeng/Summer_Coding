class Solution {
    public List<List<String>> printTree(TreeNode root) {
        int height = getHeight(root);
        List<List<String>> ans = new ArrayList<>();
        String[][] arr = new String[height][(1 << height) - 1];
        for (String[] tmp : arr) {
            Arrays.fill(tmp, "");
        }
        dfs(root, arr, 0, 0, arr[0].length - 1);
        for (String[] tmp : arr) {
            ans.add(Arrays.asList(tmp));
        }
        return ans;
    }
    
    private int getHeight(TreeNode root) {
        if (root == null) return 0;
        return 1 + Math.max(getHeight(root.left), getHeight(root.right));
    }
    
    private void dfs(TreeNode root, String[][] arr, int level, int l, int r) {
        if (root == null || l > r) return;
        int idx = (l + r) / 2;
        arr[level][idx] = "" + root.val;
        dfs(root.left, arr, level + 1, l, idx - 1);
        dfs(root.right, arr, level + 1, idx + 1, r);
    }
}
