Java:
public class Solution {
    public int minPathSum(int[][] grid) {
        if(grid==null || grid.length==0 || grid[0].length==0) return 0;
        int row=grid.length, col=grid[0].length;
        int[] dp = new int[grid.length+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[1]=0;
        for(int j=1; j<=col; ++j){
            for(int i=1; i<=row; ++i){
                dp[i]=grid[i-1][j-1]+Math.min(dp[i], dp[i-1]);
            }
        }
        return dp[row];
    }
}

C++:
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        if(grid.empty() || grid[0].empty()) return 0;
        int row=grid.size(), col=grid[0].size();
        vector<int>dp(row+1, INT_MAX);
        dp[1]=0;
        for(int j=1; j<=col; ++j){
            for(int i=1; i<=row; ++i){
                dp[i]=grid[i-1][j-1]+min(dp[i], dp[i-1]);
            }
        }
        return dp[row];
    }
};
