Java:
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<List<Integer>>> dp = new ArrayList<>();
        for(int i=1; i<=target; ++i){
            List<List<Integer>> newList = new ArrayList<>();
            for(int j=0; j<candidates.length && candidates[j] <= i; ++j){
                if(i==candidates[j]) newList.add(Arrays.asList(candidates[j]));
                else for(List<Integer> l : dp.get(i-candidates[j]-1)){
                    if(candidates[j]>=l.get(l.size()-1)){
                        List cl = new ArrayList<>();
                        cl.addAll(l);
                        cl.add(candidates[j]);
                        
                        newList.add(cl);
                    }
                    
                }
            }
            dp.add(newList);
        }
        return dp.get(target-1);
    }
}

C++:
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans;
        vector<int> tmp;
        dfs(candidates, target, tmp, ans, 0);
        return ans;
    }
    
    void dfs(vector<int>& candidates, int target, vector<int>& tmp, vector<vector<int>>& ans, int idx){
        if(target<0) return;
        if(target==0){
            ans.push_back(tmp);
        }
        
        for(int i=idx; i<candidates.size(); ++i){
            tmp.push_back(candidates[i]);
            dfs(candidates, target-candidates[i], tmp, ans, i);
            tmp.pop_back();
        }
    }
};
