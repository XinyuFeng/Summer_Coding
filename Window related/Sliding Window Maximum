C++:
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int len=nums.size();
        
        vector<int> ans(len-k+1, 0);
        if(len==0 || k==0) return vector<int>();
        int left[len];
        int right[len];
        left[0]=nums[0];
        right[len-1]=nums[len-1];
        for(int i=1; i<len; ++i){
            if(i%k==0){
                left[i]=nums[i];
            }
            else{
                left[i]=max(left[i-1], nums[i]);
            }
            
            int j=len-i-1;
            if(j%k==0){
                right[j]=nums[j];
            }
            else{
                right[j]=max(right[j+1], nums[j]);
            }
        }
        
        for(int i=0; i<len-k+1; ++i){
            ans[i]=max(left[i+k-1], right[i]);
        }
        return ans;
    }
};

Java:
public class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums==null || k==0){
            return new int[0];
        }
        int n=nums.length;
        int[] ans=new int[n-k+1];
        int idx=0;
        
            Deque<Integer> q=new ArrayDeque<>();
            for(int i=0; i<n; ++i){
                while(!q.isEmpty() && q.peek()<i-k+1){
                    q.poll();
                }
                
                while(!q.isEmpty() && nums[q.peekLast()]<nums[i]){
                    q.pollLast();
                }
                q.offer(i);
                if(i>=k-1){
                    ans[idx++]=nums[q.peek()];
                }
            }
            return ans;
    }
}
