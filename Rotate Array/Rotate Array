C++1:
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        vector<int> copy(nums);
        int n=nums.size();
        k=k%n;
        for(int i=0; i<n; ++i){
            nums[(i+k)%n]=copy[i];
        }
    }
};

C++2:
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k=k%n;
        reverse(nums.begin(), nums.begin()+n-k);
        reverse(nums.begin()+n-k, nums.end());
        reverse(nums.begin(), nums.end());
    }
};

C++3:
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n=nums.size();
        k=k%n;
        if(k==0) return;
        int tmp=nums[0];
        int pre=nums[0];
        int idx=0;
        int start=0;
        for(int i=0; i<n; ++i){
            pre=tmp;
            tmp=nums[(idx+k)%n];
            nums[(idx+k)%n]=pre;
            idx=(idx+k)%n;
            if(idx==start){
                start++;
                idx=start;
                tmp=nums[start];
            }
            
        }
    }
};
