class Trie {

    class Node {
        String word;
        Node[] child;
        Node() {
            this.child = new Node[26];
            this.word = null;
        }
    }
    private Node root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        Node cur = root;
        char[] arr = word.toCharArray();
        for (int i = 0; i < arr.length; ++i) {
            int idx = arr[i] - 'a';
            if (cur.child[idx] == null) {
                cur.child[idx] = new Node();
            }
            cur = cur.child[idx];
        }
        cur.word = word;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Node cur = root;
        char[] arr = word.toCharArray();
        for (int i = 0; i < arr.length; ++i) {
            int idx = arr[i] - 'a';
            if (cur.child[idx] == null) {
                return false;
            }
            cur = cur.child[idx];
        }
        return word.equals(cur.word);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Node cur = root;
        char[] arr = prefix.toCharArray();
        for (int i = 0; i < arr.length; ++i) {
            int idx = arr[i] - 'a';
            if (cur.child[idx] == null) {
                return false;
            }
            cur = cur.child[idx];
        }
        return true;
    }
}
