Java:
public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1=nums1.length;
        int len2=nums2.length;
        if(len1==0) return len2%2==1? nums2[len2/2] : ((double)(nums2[len2/2-1]+nums2[len2/2]))/2;
        if(len1>len2) return findMedianSortedArrays(nums2, nums1);
        
        int left=0, right=len1, diff=(len1+len2+1)/2;
        int l1=0, l2=diff;
        while(left<=right){
            l1=(left+right)/2;
            l2=diff-l1;
            if(l1>0 && nums1[l1-1]>nums2[l2]) right=l1;
            else if(l1<len1 && nums2[l2-1]>nums1[l1]) left=l1+1;
            else break;
        }
        double left_max, right_max;
        if(l1==0) left_max=nums2[l2-1];
        else if(l2==0) left_max=nums1[l1-1];
        else left_max=Math.max(nums2[l2-1], nums1[l1-1]);
        
        if((len1+len2)%2==1) return left_max;
        
        if(l1==len1) right_max=nums2[l2];
        else if(l2==len2) right_max=nums1[l1];
        else right_max=Math.min(nums2[l2], nums1[l1]);
        
        return (left_max+right_max)/2;
    }
}

C++:
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size()>nums2.size()) return findMedianSortedArrays(nums2, nums1);
        
        int len1=nums1.size();
        int len2=nums2.size();
        if(len1==0) return len2%2? nums2[len2/2] : ((double)(nums2[len2/2-1]+nums2[len2/2]))/2;
        int l1=0, l2=(len1+len2+1)/2;
        int left=0, right=len1;
        while(left<=right){
            l1 = left+(right-left)/2;
            l2=(len1+len2+1)/2-l1;
            if(l1>0 && nums1[l1-1]>nums2[l2]) right=l1-1;
            else if(l1<len1&&nums2[l2-1]>nums1[l1]) left=l1+1;
            else break;
        }
        if(l1==0){
            if(len1==len2) return ((double)(nums1[l1]+nums2[l2-1]))/2;
            //else if(len2==len1+1) return max(nums2[l2-1], nums1[l1-1]);
            else if((len1+len2)%2){
                 return nums2[l2-1];
            }
            else return ((double)(min(nums2[l2], nums1[l1])+nums2[l2-1]))/2;
        }
        if(l1==len1){
            if(len1==len2) return ((double)(nums1[l1-1]+nums2[l2]))/2;
            //else if(len2==len1+1) return max(nums2[l2-1], nums1[l1-1]);
            else if((len1+len2)%2){
                  return max(nums2[l2-1], nums1[l1-1]);
            }
            else return ((double)(nums2[l2]+max(nums2[l2-1], nums1[l1-1])))/2;
        }
        
        if((len1+len2)%2){
              return max(nums2[l2-1], nums1[l1-1]);
        }else{
            return ((double)(min(nums2[l2], nums1[l1])+max(nums2[l2-1], nums1[l1-1])))/2;
        }
        
    }
};
