class Solution {
    public boolean makesquare(int[] nums) {
        if (nums == null || nums.length < 4) return false;
        int sum = 0;
        for (int i = 0; i < nums.length; ++i) {
            sum += nums[i];
        }
        if (sum % 4 != 0) return false;
        Arrays.sort(nums);
        reverse(nums);
        int side = sum / 4;
        int[] tmp = {side, side, side, side};
        return dfs(nums, 0, tmp);
        
    }
    
    private boolean dfs(int[] nums, int idx, int[] tmp) {
        if (idx == nums.length) {
            if (tmp[0] == 0 && tmp[1] == 0 && tmp[2] == 0 && tmp[3] == 0){
                return true;
            }
            return false;
        }
        
        for (int i = 0; i < 4; ++i) {
            if (tmp[i] - nums[idx] < 0) continue;
            tmp[i] -= nums[idx];
            if (dfs(nums, idx + 1, tmp)) {
                return true;
            }
            tmp[i] += nums[idx];
        }
        return false;
    }
    
    private void reverse(int[] arr) {
        int i = 0, j = arr.length - 1;
        while(i < j) {
            int tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
    }
}
