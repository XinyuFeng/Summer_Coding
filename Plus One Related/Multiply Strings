Java version:
public class Solution {
    public String multiply(String num1, String num2) {
        int m = num1.length(), n=num2.length();
        int[] pos = new int[m+n];
        for(int i=m-1; i>=0; --i){
            int carry=0;
            for(int j=n-1; j>=0; --j){
                int mul = (num1.charAt(i)-'0')*(num2.charAt(j)-'0');
                int p = i + j + 1;
                int sum = mul+pos[p]+carry;
                pos[p]=sum%10;
                carry=sum/10;
            }
            pos[i]=carry;
        }
        StringBuilder sb = new StringBuilder();
        for(int p : pos) if(!(sb.length() == 0 && p == 0)) sb.append(p);
        return sb.length() == 0 ? "0": sb.toString();
    }
    

}

C++ version:
class Solution {
public:
    string multiply(string num1, string num2) {
        
        if(num1=="0" || num2=="0") return "0";
        int l1=num1.size();
        int l2=num2.size();
        string ans="";
        ans.resize(l1+l2, '0');
        
        for(int i=l1-1; i>=0; --i){
            int c=0;
            int c1=0;
            for(int j=l2-1; j>=0; --j){
                int idx=i+j+1;
                int sum=(num1[i]-'0')*(num2[j]-'0')+c;
                int tmp=c1;
                c1=(sum%10+ans[idx]-'0'+c1)/10;
                ans[idx]=char((sum+ans[idx]-'0'+tmp)%10+'0');
                c=sum/10;
                
            }
            if(c || c1) ans[i]=char(c+c1+'0');
        }
        
        
        return ans.substr(ans.find_first_not_of('0'));
    }
};
